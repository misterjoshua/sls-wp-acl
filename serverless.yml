service:
  name: sls-wp-acl
# app and org for use with dashboard.serverless.com
#app: your-app-name
#org: your-org-name

custom:
  webpack:
    webpackConfig: ./webpack.config.js
    includeModules: true

# Add the serverless-webpack plugin
plugins:
  - serverless-webpack

provider:
  name: aws
  runtime: nodejs12.x
  memorySize: 128
  tracing:
    lambda: true
    apiGateway: true
  iamRoleStatements:
    - Effect: "Allow"
      Action:
        - "sqs:*"
        - "sns:*"
        - "ssm:*"
      Resource:
        - Fn::Join:
            - ":"
            - - "arn:aws:ssm"
              - Ref: AWS::Region
              - Ref: AWS::AccountId
              - "parameter/sls-wp-acl"
        - Fn::Join:
            - ":"
            - - "arn:aws:ssm"
              - Ref: AWS::Region
              - Ref: AWS::AccountId
              - "parameter/sls-wp-acl/*"
        - Fn::GetAtt: [listItemsTaskQueue, Arn]
        - Fn::GetAtt: [getItemTaskQueue, Arn]
        - !Ref putItemTopic
        - !Ref knownItemsTopic
  apiGateway:
    minimumCompressionSize: 1024 # Enable gzip compression for responses > 1 KB
  environment:
    AWS_NODEJS_CONNECTION_REUSE_ENABLED: 1
    configRoot: /sls-wp-acl
    getItemTaskQueueUrl: !Ref getItemTaskQueue
    listItemsTaskQueueUrl: !Ref listItemsTaskQueue
    putItemTopic: !Ref putItemTopic
    knownItemsTopic: !Ref knownItemsTopic

functions:
  resyncApi:
    handler: handler.resyncApi
    events:
      - http:
          path: /wp/{apiName}/resync
          method: any

  resyncAllApi:
    handler: handler.resyncAllApi
    events:
      - http:
          path: /wp/all/resync
          method: any

  resyncScheduler:
    handler: handler.resyncScheduler
    events:
      - schedule: rate(6 hours)

  listItemsTask:
    handler: handler.listItemsTask
    # reservedConcurrency: 5
    events:
      - sqs:
          arn: { Fn::GetAtt: [listItemsTaskQueue, Arn] }
          batchSize: 1

  getItemTask:
    handler: handler.getItemTask
    # reservedConcurrency: 5
    events:
      - sqs:
          arn: { Fn::GetAtt: [getItemTaskQueue, Arn] }
          batchSize: 1

resources:
  Resources:
    listItemsTaskQueue:
      Type: AWS::SQS::Queue
    getItemTaskQueue:
      Type: AWS::SQS::Queue

    # Clients subscribe to these.
    putItemTopic:
      Type: AWS::SNS::Topic
    deleteItemTopic:
      Type: AWS::SNS::Topic
    knownItemsTopic:
      Type: AWS::SNS::Topic

    putItemTopicObserverQueue:
      Type: AWS::SQS::Queue

    putItemTopicObserverSubscription:
      Type: AWS::SNS::Subscription
      Properties:
        TopicArn: !Ref putItemTopic
        Endpoint:
          Fn::GetAtt: [putItemTopicObserverQueue, Arn]
        Protocol: sqs
        RawMessageDelivery: "false"

    httpSubscription:
      Type: AWS::SNS::Subscription
      Properties:
        TopicArn: !Ref putItemTopic
        Endpoint: https://webhook.site/27c389c2-e5bd-4445-8806-3385f4ed1aa5
        Protocol: https
        RawMessageDelivery: "false"
    httpSubscription2:
      Type: AWS::SNS::Subscription
      Properties:
        TopicArn: !Ref knownItemsTopic
        Endpoint: https://webhook.site/27c389c2-e5bd-4445-8806-3385f4ed1aa5
        Protocol: https
        RawMessageDelivery: "false"

  Outputs:
    putItemTopic:
      Description: "ARN for the putItem SNS topic"
      Value: !Ref putItemTopic
    deleteItemTopic:
      Description: "ARN for the deleteItem SNS topic"
      Value: !Ref deleteItemTopic
    knownItemsTopic:
      Description: "ARN for the knownItems SNS topic"
      Value: !Ref knownItemsTopic
